import * as ts from 'typescript';
import { ResourceResolver } from './resource-resolver';
import { CompileNgModuleSummary } from '@angular/compiler';
import { PipeSymbol } from './pipe-symbol';
import { DirectiveSymbol } from './directive-symbol';
import { ModuleSymbol } from './module-symbol';
/**
 * Creates a proxy which provides us access to the symbols
 * defined in given context (could be lazy loaded module or the root module).
 *
 * @export
 * @class ContextSymbols
 */
export declare class ContextSymbols {
    private program;
    private resourceResolver;
    private metadataResolver;
    private reflector;
    private staticSymbolResolver;
    private staticResolverHost;
    private pipeResolver;
    private directiveResolver;
    private urlResolver;
    private directiveNormalizer;
    private lastProgram;
    private options;
    private analyzedModules;
    /**
     * Creates an instance of ContextSymbols.
     *
     * @param {ts.Program} program
     * @param {ResourceResolver} resourceResolver
     *
     * @memberOf ContextSymbols
     */
    constructor(program: ts.Program, resourceResolver: ResourceResolver);
    /**
     * Returns the metadata associated to this module.
     *
     * @returns {ModuleSymbol[]}
     *
     * @memberOf ContextSymbols
     */
    getModules(): ModuleSymbol[];
    /**
     * Returns all the directives available in the context.
     *
     * @returns {DirectiveSymbol[]}
     *
     * @memberOf ContextSymbols
     */
    getDirectives(): DirectiveSymbol[];
    /**
     * Returns all the pipes available in this module.
     *
     * @returns {PipeSymbol[]}
     *
     * @memberOf ContextSymbols
     */
    getPipes(): PipeSymbol[];
    /**
     * Returns the summary of this context.
     *
     * @returns {(CompileNgModuleSummary | undefined)}
     *
     * @memberOf ContextSymbols
     */
    getContextSummary(): CompileNgModuleSummary | undefined;
    /**
     * Updates the program which has impact over the loaded symbols.
     * In case the `udpate` method is called with program different from
     * the current one, all the internal caches will be cleared.
     *
     * @param {ts.Program} program
     *
     * @memberOf ContextSymbols
     */
    updateProgram(program: ts.Program): void;
    /**
     * Returns directive based on `ClassDeclaration` node and a filename.
     *
     * @param {ts.ClassDeclaration} declaration
     * @param {string} fileName
     *
     * @memberOf DirectiveSymbol
     */
    getDirectiveFromNode(declaration: ts.ClassDeclaration, fileName: string): DirectiveSymbol;
    private extractProgramSymbols();
    private validate();
    private clearCaches();
    private init();
}
